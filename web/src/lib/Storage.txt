// const NewSpace = () => {
//
//   const {
//     register,
//     handleSubmit,
//     watch,
//     formState: { errors, isValid },
//   } = useForm<NewSpaceType>({ resolver: zodResolver(NewSpaceScheme) });
//
//   const onSubmit: SubmitHandler<NewSpaceType> = (data: NewSpaceType) => {
//     console.log(data);
//     if (isValid) {
//       console.log('valid data');
//     }
//   };
//
//   return (
//     <section className={'op flex justify-center items-center transition-all'}>
//       <main className={'op bg-white w-[25rem] my-10 mx-auto px-9 py-10 rounded-lg shadow-2xl space-y-4'}>
//         {/*<p className={'op h-5 text-[0.8rem] text-red-500 block'}>{error}</p>*/}
//         <form onSubmit={handleSubmit(onSubmit)}>
//
//           <Input inputName={'spaceName'} inputError={errors.spaceName} register={register} watch={watch}/>
//           <Input inputName={'websiteUrl'} inputError={errors.websiteUrl} register={register} watch={watch}/>
//           <Input inputName={'headerTitle'} inputError={errors.headerTitle} register={register} watch={watch}/>
//           <Input inputName={'customMessage'} inputError={errors.customMessage} register={register} watch={watch}/>
//           <Input inputName={'question'} inputError={errors.question} register={register} watch={watch}/>
//
//           <Button type={'submit'} text={'Register'} variant={'outlineB'} className={'mt-10 w-40'} />
//         </form>
//       </main>
//     </section>
//   );
// };
// export default NewSpace;


import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { api } from '../lib/manageFetch/api';
import { NewSpaceType } from './Types';
// import { RootState } from '../app/store';


export const createNewSpace = createAsyncThunk('space/createNewSpace', async (data: NewSpaceType) => {
  // dispatch(resetError());
  // dispatch(setLoading(true));
  const url = '/api/space/new';
  return await api.post(url, data);
});


// const initialState: { error: undefined | string, loading: boolean } = {
//   error: undefined,
//   loading: false,
// };


const spaceSlice = createSlice({
  name: 'space',
  initialState: {},
  reducers: {},
  //   resetError(state) {
  //     state.error = undefined;
  //   },
  //   setLoading(state, action: PayloadAction<boolean>) {
  //     state.loading = action.payload;
  //   },
  // },
  // extraReducers(builder) {
  //   builder
  //     .addCase(createNewSpace.fulfilled, (state) => {
  //       state.loading = false;
  //       state.error = undefined;
  //     })
  //     .addCase(createNewSpace.rejected, (state, action) => {
  //       state.loading = false;
  //       console.log(action.error.message);
  //       state.error = action.error.message;
  //     })
  // },
});

// export const getSpaceError = (state: RootState) => state.space.error;
// export const getSpaceLoading = (state: RootState) => state.space.loading;

// export const { resetError,setLoading } = spaceSlice.actions;
export default spaceSlice.reducer;



import { SubmitHandler, useForm } from 'react-hook-form';
import { NewSpaceScheme, NewSpaceType } from './Types';
import { zodResolver } from '@hookform/resolvers/zod';
import Button from '../ui/components/Button';
import Input from '../ui/components/Input';
import { useDispatch, useSelector } from 'react-redux';
import { AppDispatch } from '../app/store';
import { createNewSpace} from './spaceSlice';
import { useNavigate } from 'react-router-dom';
import { toast } from 'sonner';
import { useState } from 'react';

const NewSpace = () => {
  const [loading,setLoading] = useState<boolean>(false);
  const dispatch: AppDispatch = useDispatch();
  const navigate = useNavigate();

  const {
    register,
    handleSubmit,
    watch,
    formState: { errors, isValid },
  } = useForm<NewSpaceType>({ resolver: zodResolver(NewSpaceScheme) });

  const watchedSpaceName = watch('spaceName');
  const publicUrl = watchedSpaceName
    ? NewSpaceScheme.shape.spaceName.parse(watchedSpaceName)
    : '';


  const onSubmit: SubmitHandler<NewSpaceType> = async (data: NewSpaceType) => {
    if (isValid) {
      setLoading(true);
      try {
        await dispatch(createNewSpace(data)).unwrap();
        toast.success('New space created successfully');
        navigate('/dashboard');
      } catch (err) {
        const errorMessage =  err ? err.message : 'An error occurred while creating the space.';
        toast.error(errorMessage);
      }finally {
        setLoading(false)
      }
    }
  };

  return (
    <section className="flex items-center justify-center transition-all">
      <main className="mx-auto my-10 w-full max-w-2xl space-y-6 rounded-lg bg-white px-12 py-12 shadow-2xl">
        <h1 className="mb-14 text-center text-2xl font-bold text-gray-800">
          New Space
        </h1>
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-7">
          <Input
            inputName={'spaceName'}
            inputError={errors.spaceName}
            register={register}
            publicUrl={publicUrl}
          />
          <Input
            inputName={'websiteUrl'}
            inputError={errors.websiteUrl}
            register={register}
          />
          <Input
            inputName={'headerTitle'}
            inputError={errors.headerTitle}
            register={register}
          />
          <Input
            inputName={'customMessage'}
            inputError={errors.customMessage}
            register={register}
          />
          <Input
            inputName={'question'}
            inputError={errors.question}
            register={register}
          />

          <Button
            type={'submit'}
            text={'Create '}
            variant={'outlineB'}
            className={'w-full text-lg'}
            loading={loading}
          />
        </form>
      </main>
    </section>
  );
};

export default NewSpace;
